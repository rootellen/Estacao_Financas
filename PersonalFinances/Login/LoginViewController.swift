//
//  LoginViewController.swift
//  PersonalFinances
//
//  Created by Ruth Ellen da Silva on 15/12/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func displayResult(viewModel: Login.Logar.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic {
    
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic)?

    // MARK: Object lifecycle

    init() {
        super.init(nibName: "LoginView", bundle: nil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }


    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    //MARK: - receive events from UI
    
    @IBOutlet weak var tfUser: UITextField!
    @IBOutlet weak var tfPassword: UITextField!
    @IBOutlet weak var btnAccess: UIButton!
    
    @IBAction func access(_ sender: Any) {
        requestLogin()
    }
    
    // MARK: - request data from LoginInteractor

    func requestLogin() {
        if let user = tfUser.text, let pass = tfPassword.text {
            let request = Login.Logar.Request(user: user, pass: pass)
            interactor?.handleFetchLogin(request: request)
        }
    }


    // MARK: - display view model from LoginPresenter

    func displayResult(viewModel: Login.Logar.ViewModel) {
        DispatchQueue.main.async {
            if viewModel.mensagem == "Sucesso" {
                self.router?.routeToHome()
            } else {
                self.alertErro(mensagem: viewModel.mensagem)
            }
        }
    }
    
    
    func alertErro(mensagem: String) {
        let alert = UIAlertController(title: "Erro", message: mensagem, preferredStyle: .alert)
        let ok = UIAlertAction(title: "OK", style: .default, handler: { (action) -> Void in
             print("")
          })
        alert.addAction(ok)
        self.present(alert, animated: true, completion: nil)
    }
}
